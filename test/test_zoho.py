# –ù–æ–≤—ã–π –∫–∞—Ä–∫–∞—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ZOHO/Google

from services.ZOHO.Zoho_api_client import ZohoAPI
import services.ZOHO.portal_data
from services.Release_Test_Plan.TestPlanGenerator import TestPlanGenerator
import os
import json


class QAService:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Ä–∞–±–æ—Ç—É —Å ZOHO API, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤.

    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è:
    - –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç-–ø–ª–∞–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown,
    - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –∏ –±–∞–≥–æ–≤ –∏–∑ ZOHO,
    - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –∫–ª–∏–µ–Ω—Ç–∞ ZOHO API.
        """
        self.api = ZohoAPI()  # API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å ZOHO
        self.users = services.ZOHO.portal_data.user_manager  # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (UserManager)
        self.task_statuses = services.ZOHO.portal_data.task_status_manager  # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á (TaskStatusManager)
        self.defect_statuses = services.ZOHO.portal_data.defect_status_manager  # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –±–∞–≥–æ–≤ (DefectStatusManager)

        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞, –∫–æ—Ç–æ—Ä–æ–º—É –ø–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.generator = TestPlanGenerator(
            users_mngr=self.users,
            task_status_mngr=self.task_statuses,
            defect_status_mngr=self.defect_statuses,
            api_client=self.api
        )

    def generate_markdown_plan(self, filters: dict, sprint_name: str, start_date: str, end_date: str):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç-–ø–ª–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∑–∞–¥–∞—á.

        :param filters: –°–ª–æ–≤–∞—Ä—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, created_after / milestone_id –∏ —Ç.–ø.)
        :param sprint_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        :param start_date: –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
        :param end_date: –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        """
        self.generator.set_dates(start_date, end_date)
        tasks = self.api.get_entities_by_filter(entity_type="tasks", **filters)
        if tasks:
            self.generator.generate_plan_for_tasks(tasks, output_file=f"plan_{sprint_name}.md")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

    def sync_statuses_from_zoho(self, force=False):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏–∑ ZOHO API.

        :param force: –ï—Å–ª–∏ True ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫—ç—à
        """
        cache_path = "services/ZOHO/status_cache.json"
        if force or not os.path.exists(cache_path):
            print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Zoho...")
            task_statuses = self.api.get_blueprint_graph()
            bug_statuses = self.api.get_bug_statuses()
            status_data = {
                "task_statuses": task_statuses,
                "bug_statuses": bug_statuses
            }
            with open(cache_path, "w", encoding="utf-8") as f:
                json.dump(status_data, f, ensure_ascii=False, indent=2)
            self.generator.sync_statuses(task_statuses, bug_statuses)
        else:
            print("‚úÖ –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤ —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞...")
            with open(cache_path, "r", encoding="utf-8") as f:
                status_data = json.load(f)
            self.generator.sync_statuses(status_data["task_statuses"], status_data["bug_statuses"])


# main.py –ø—Ä–∏–º–µ—Ä—ã –≤—ã–∑–æ–≤–∞
if __name__ == "__main__":
    service = QAService()
    filters = {"created_after": "2025-04-15", "created_before": "2025-04-22"}
    service.sync_statuses_from_zoho()
    service.generate_markdown_plan(filters, "Release #20", "2025-04-15", "2025-04-22")
