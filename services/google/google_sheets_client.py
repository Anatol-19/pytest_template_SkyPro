import gspread
import numpy as np
from typing import Dict, List, Optional, Any, Literal
from gspread.exceptions import APIError, WorksheetNotFound
from google.oauth2.service_account import Credentials


class GoogleSheetsClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Google Sheets:
    - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    - –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤)
    - –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    - –§–æ—Ä–º—É–ª—ã –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
    """

    def __init__(
        self,
        credentials_path: str,
        spreadsheet_id: str,
        worksheet_name: str
    ):
        self.credentials_path = credentials_path
        self.spreadsheet_id = spreadsheet_id
        self.worksheet_name = worksheet_name
        self.client = self._authorize()
        self.spreadsheet = self.client.open_by_key(self.spreadsheet_id)
        self.sheet = self._open_or_create_sheet(worksheet_name)
        self._batch_rows: List[List[Any]] = []

    def _authorize(self):
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        credentials = Credentials.from_service_account_file(
            self.credentials_path,
            scopes=scopes
        )
        return gspread.authorize(credentials)

    def _open_or_create_sheet(self, sheet_name: str):
        try:
            return self.spreadsheet.worksheet(sheet_name)
        except WorksheetNotFound:
            print(f"[INFO] –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
            return self.spreadsheet.add_worksheet(title=sheet_name, rows=100, cols=30)

    def append_result(self, data: Dict[str, Any], raw_formula_fields: Optional[List[str]] = None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É (–≤ –ø–∞–º—è—Ç—å) –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π batch-–∑–∞–ø–∏—Å–∏.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∫–ª—é—á–∏.
        """
        headers = self._get_or_create_headers(data)
        processed_data = self._normalize_data(data)

        row = []
        for h in headers:
            val = processed_data.get(h, "")
            row.append(val)

        self._batch_rows.append(row)

    def flush(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º.
        """
        if not self._batch_rows:
            print("[DEBUG] –ù–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        try:
            print(f"[INFO] –ó–∞–ø–∏—Å—å {len(self._batch_rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É '{self.worksheet_name}'...")
            self.sheet.append_rows(self._batch_rows, value_input_option="USER_ENTERED")
            self._batch_rows.clear()
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å batch-–∑–∞–ø–∏—Å—å: {e}")
            raise

    def append_result_to_sheet(self, sheet_name: str, row: Dict[str, Any]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç.
        """
        try:
            target_sheet = self.spreadsheet.worksheet(sheet_name)
            values = list(row.values())
            target_sheet.append_row(values, value_input_option="USER_ENTERED")
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –≤ '{sheet_name}': {e}")
            raise


    def ensure_sheet_exists(self, sheet_name: str, source: Literal["cli", "api", "crux"]):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–∏—Å—Ç–∞. –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∫–ª–æ–Ω–∏—Ä—É–µ—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
        :param sheet_name: –ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –ª–∏—Å—Ç–∞.
        :param source: –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∏–∑ –∫–∞–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å ('cli', 'api', 'crux').
        """
        try:
            spreadsheet = self.client.open_by_key(self.spreadsheet_id)
            sheet_titles = [ws.title for ws in spreadsheet.worksheets()]
            if sheet_name not in sheet_titles:
                from services.lighthouse.configs.config_lighthouse import TEMPLATE_SHEETS  # üëà –æ—Ç—Ç—É–¥–∞ –±–µ—Ä—ë–º —à–∞–±–ª–æ–Ω
                template_name = TEMPLATE_SHEETS.get(source.lower())
                if not template_name:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è source={source}")
                print(f"[INFO] –°–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç '{sheet_name}' –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{template_name}'...")
                template_sheet = spreadsheet.worksheet(template_name)
                spreadsheet.duplicate_sheet(template_sheet.id, new_sheet_name=sheet_name)
            else:
                print(f"[DEBUG] –õ–∏—Å—Ç '{sheet_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞: {e}")
            raise

    def _get_or_create_headers(self, data: Dict[str, Any]) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã. –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –µ—Å–ª–∏ –≤ data –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏.

        :param data: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äî –∏–º—è —Å—Ç–æ–ª–±—Ü–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏.
        :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ.
        """
        try:
            current_headers = self.sheet.row_values(1)
        except APIError:
            current_headers = []

        if not current_headers:
            # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ –∫–ª—é—á–∞–º –∏–∑ data
            headers = list(data.keys())
            self.sheet.insert_row(headers, index=1)
            return headers

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
        missing_headers = [key for key in data.keys() if key not in current_headers]
        if missing_headers:
            updated_headers = current_headers + missing_headers
            self.sheet.update('1:1', [updated_headers])
            return updated_headers

        return current_headers

    def _normalize_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Google Sheets.
        """
        normalized = {}
        for k, v in data.items():
            if isinstance(v, (np.integer, np.int32, np.int64)):
                normalized[k] = int(v)
            elif isinstance(v, (np.floating, np.float32, np.float64)):
                normalized[k] = float(v)
            else:
                normalized[k] = v
        return normalized

    @staticmethod
    def prepare_link(anchor: str, url: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É HYPERLINK –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —è—á–µ–π–∫—É.
        """
        return f'=HYPERLINK("{url}"; "{anchor}")'
