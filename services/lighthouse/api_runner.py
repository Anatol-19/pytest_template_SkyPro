# üìå Google Lighthouse API (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)
import json
import os
import urllib.parse
import urllib.request
from typing import List, Optional


def run_lighthouse_api(
    url: str,
    strategy: str = "mobile",
    categories: Optional[List[str]] = None,
    api_key: Optional[str] = None,
    save_path: Optional[str] = None,
    mode: str = "lab"
) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Google PageSpeed Insights API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON-—Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    :param url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    :param strategy: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ("mobile" –∏–ª–∏ "desktop")
    :param categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: ["performance", "accessibility"])
    :param api_key: –ö–ª—é—á API Google (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON-–æ—Ç—á–µ—Ç–∞
    :param mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã "lab" –¥–ª—è "–≤ –º–æ–º–µ–Ω—Ç–µ", "field" –¥–ª—è CrUX
    :return: dict ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Lighthouse
    """

    base_url = "https://www.googleapis.com/pagespeedonline/v5/runPagespeed"
    api_key = os.getenv("API_KEY")

    print(f"[DEBUG] - API_KEY: {api_key}")  # –û—Ç–ª–∞–¥–∫–∞. –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not api_key:
        print("API Key –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è API_KEY –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–ª—é—á –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.")

    params = {
        "url": url,
        "strategy": strategy,
        "key": api_key
    }

    if categories:
        params["category"] = categories


    encoded_params = urllib.parse.urlencode(params, doseq=True)
    full_url = f"{base_url}?{encoded_params}"


    try:
        with urllib.request.urlopen(full_url) as response:
            result = json.loads(response.read().decode())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å)
        if save_path:
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            with open(save_path, "w", encoding="utf-8") as f:
                json.dump(result, f, ensure_ascii=False, indent=2)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == "field":
            return result.get("loadingExperience", {})  # CrUX (28-–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        elif mode == "lab":
            return result.get("lighthouseResult", {})  # Lab data (–≤ –º–æ–º–µ–Ω—Ç–µ)
        else:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
        return {}