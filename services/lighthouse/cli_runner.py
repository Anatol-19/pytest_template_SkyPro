"""
–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Lighthouse —á–µ—Ä–µ–∑ CLI.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ü—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è Lighthouse CLI
    - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    - –ó–∞–ø—É—Å–∫ Lighthouse –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤
"""

import json
import os
import shutil
import subprocess
from datetime import datetime

from services.lighthouse.configs.config_lighthouse import get_temp_dir_for_route
from services.lighthouse.processor_lighthouse import parse_lighthouse_results

# üìå –ò—â–µ–º –ø—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É Lighthouse CLI
LIGHTHOUSE_CMD = shutil.which("lighthouse")
_lighthouse_checked = False  # –§–ª–∞–≥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
CONFIG_DIR = os.path.join(os.path.dirname(__file__), "configs")


def check_lighthouse_environment():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Lighthouse CLI –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ npm/node.
    """
    global _lighthouse_checked
    if _lighthouse_checked:
        return  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –±—ã–ª–∞

    if LIGHTHOUSE_CMD is None:
        raise RuntimeError("‚ùå Lighthouse –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: npm install -g lighthouse")

    try:
        result = subprocess.run([LIGHTHOUSE_CMD, "--version"], capture_output=True, text=True)
        if result.returncode != 0:
            check_npm_environment()
            raise RuntimeError("‚ùå Lighthouse —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        print(f"[INFO] Lighthouse —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Lighthouse: {e.stderr}")

    _lighthouse_checked = True


def check_npm_environment():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ npm –∏ Node.js –≤ —Å–∏—Å—Ç–µ–º–µ.
    """
    try:
        result = subprocess.run(["npm", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"[INFO] npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
        else:
            raise RuntimeError("‚ùå npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        raise RuntimeError(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ npm: {e}")

    try:
        result = subprocess.run(["node", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"[INFO] Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
        else:
            raise RuntimeError("‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        raise RuntimeError(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Node.js: {e}")


def load_device_config(device: str) -> dict | None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º—É–ª—è—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (desktop –∏–ª–∏ mobile).
    """
    config_file = os.path.join(CONFIG_DIR, f"config_{device}.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, "r", encoding="utf-8") as file:
                return json.load(file)
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{device}': {e}")
    return None


def run_local_lighthouse(
        route_key: str,
        route_url: str,
        iteration_count: int = 5,
        device: str = "desktop",
        mode: str = "navigation",
        categories: list = None,
        user_agent: str = None,
        strategy: str = None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Lighthouse CLI –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    :param route_key: –ö–ª—é—á —Ä–æ—É—Ç–∞.
    :param route_url: –ü–æ–ª–Ω—ã–π URL.
    :param iteration_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–Ω–æ–≤.
    :param device: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ("desktop" –∏–ª–∏ "mobile").
    :param mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã Lighthouse.
    :param categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    :param user_agent: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏.
    :param strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ("desktop" –∏–ª–∏ "mobile").
    :return: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ JSON-–æ—Ç—á—ë—Ç–∞–º.
    """
    check_lighthouse_environment()

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if categories is None:
        categories = ["performance", "accessibility", "best-practices", "seo"]

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    temp_dir = get_temp_dir_for_route(route_key, device, prefix="CLI")

    results = []
    json_paths = []

    date = datetime.now().strftime("%d-%m-%y")
    environment = os.getenv("ENVIRONMENT", "local")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    config = load_device_config(device)
    if config:
        print(f"[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device}")
        preset = config.get("settings", {}).get("formFactor", "desktop")
        screen_emulation = config.get("settings", {}).get("screenEmulation", {})
        throttling = config.get("settings", {}).get("throttling", {})
        throttling_method = config.get("settings", {}).get("throttlingMethod", "simulate")
    else:
        print(f"[WARNING] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{device}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
        preset = "desktop"
        screen_emulation = {}
        throttling = {}
        throttling_method = "simulate"

    try:
        for iteration in range(1, iteration_count + 1):
            report_file = os.path.join(temp_dir, f"Report_CLI_{date}_{environment}_{route_key}_iter_{iteration}.json")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
            command = [
                LIGHTHOUSE_CMD, route_url,
                "--output=json",
                f"--output-path={report_file}",
                "--chrome-flags=--headless --no-sandbox",
                f"--preset={preset}",
                f"--emulated-form-factor={device}",
                f"--throttling-method={throttling_method}",
                f"--mode={mode}",
                f"--only-categories={','.join(categories)}"
            ]

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–º—É–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
            if screen_emulation:
                if "width" in screen_emulation:
                    command.append(f"--emulated-screen-width={screen_emulation['width']}")
                if "height" in screen_emulation:
                    command.append(f"--emulated-screen-height={screen_emulation['height']}")
                if "deviceScaleRatio" in screen_emulation:
                    command.append(f"--emulated-device-scale-factor={screen_emulation['deviceScaleRatio']}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if user_agent:
                command.append(f"--extra-headers=\"User-Agent: {user_agent}\"")
            if throttling:
                for key, value in throttling.items():
                    command.append(f"--throttling.{key}={value}")
            if strategy:
                command.append(f"--strategy={strategy}")

            print(f"[INFO] –ó–∞–ø—É—Å–∫ Lighthouse –¥–ª—è: {route_url} - {device}, –∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}")
            print(f"[DEBUG] –ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")

            result = subprocess.run(command, capture_output=True, text=True)

            if result.returncode != 0:
                print(f"[ERROR] –û—à–∏–±–∫–∞ Lighthouse: {result.stderr}")
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Lighthouse –¥–ª—è {route_key}")

            if not os.path.exists(report_file):
                print(f"[ERROR] –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {report_file}")
                continue

            json_paths.append(report_file)
            parsed_results = parse_lighthouse_results(report_file)
            results.append(parsed_results)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –¥–ª—è {route_key}: {e}")

    return json_paths
