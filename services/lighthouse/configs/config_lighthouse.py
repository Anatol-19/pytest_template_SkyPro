import configparser
import os
import shutil
from datetime import datetime
from pathlib import Path
import inspect

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
BASE_URL = None # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL

ROOT_DIR = Path(__file__).resolve().parents[3] # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
LIGHTHOUSE_DIR = ROOT_DIR / "services" / "lighthouse"  # –ü–∞–ø–∫–∞ lighthouse
URLS_DIR = ROOT_DIR / "URLs"  # –ü–∞–ø–∫–∞ URLs
REPORTS_DIR = ROOT_DIR / "Reports" / "reports_lighthouse" # –ü—É—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
TEMP_REPORTS_DIR = REPORTS_DIR  / "temp_lighthouse" # –ü—É—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
CONFIG_PATH = URLS_DIR / "base_urls.ini"
ROUTES_CONFIG_PATH = URLS_DIR / "routes.ini"

print("–ò—â—É –∫–æ–Ω—Ñ–∏–≥ –ø–æ –ø—É—Ç–∏:", CONFIG_PATH)
if not os.path.exists(CONFIG_PATH):
    raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONFIG_PATH}")


def ensure_directories_exist():
    """ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    try:
        REPORTS_DIR.mkdir(parents=True, exist_ok=True)
        TEMP_REPORTS_DIR.mkdir(parents=True, exist_ok=True)
        print(f"[INFO] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")
    except Exception as e:
        raise RuntimeError(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")


def load_routes_config()-> configparser.ConfigParser:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ routes.ini.
    :return: –û–±—ä–µ–∫—Ç ConfigParser —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    config = configparser.ConfigParser()
    config.read(ROUTES_CONFIG_PATH, encoding="utf-8")
    return config


def get_current_environment() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.
    :return: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    :raises KeyError: –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [environments] –∏–ª–∏ –∫–ª—é—á 'current' –≤ base_urls.ini.
    """
    config = configparser.ConfigParser()
    config.read(CONFIG_PATH, encoding="utf-8")
    if "environments" not in config or "current" not in config["environments"]:
        raise KeyError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [environments] –∏–ª–∏ –∫–ª—é—á 'current' –≤ base_urls.ini")
    return config["environments"]["current"]


def get_base_url() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç BASE_URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞.
    :return: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    :raises FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.
    :raises KeyError: –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [environments] –∏–ª–∏ –∫–ª—é—á 'current' –≤ base_urls.ini, –∏–ª–∏ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    global BASE_URL
    if BASE_URL is None:
        config = configparser.ConfigParser()

        if not os.path.exists(CONFIG_PATH):
            raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONFIG_PATH}")

        config.read(CONFIG_PATH, encoding="utf-8")

        if "environments" not in config or "current" not in config["environments"]:
            raise KeyError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [environments] –∏–ª–∏ –∫–ª—é—á 'current' –≤ base_urls.ini")

        current_env = config["environments"]["current"]
        BASE_URL = config[current_env]["BASE_URL"]
        print(f"—É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—É—Ä: {current_env} - {BASE_URL}")  # üîç –û—Ç–ª–∞–¥–∫–∞. –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ

        if current_env not in config:
            raise KeyError(f"–ö–æ–Ω—Ç—É—Ä '{current_env}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ base_urls.ini")

    return BASE_URL


def get_route(route_name: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–∞.
    :param route_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–∞.
    :return: –ü—É—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–∞.
    :raises KeyError: –ï—Å–ª–∏ —Ä–æ—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ routes.ini.
    """
    config = configparser.ConfigParser()
    config.read(ROUTES_CONFIG_PATH, encoding="utf-8")

    if "routes" not in config or route_name not in config["routes"]:
        raise KeyError(f"–†–æ—É—Ç '{route_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ routes.ini")

    return config["routes"][route_name]


def get_full_url(route_name: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–∞.
    :param route_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–∞.
    :return: –ü–æ–ª–Ω—ã–π URL –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–∞.
    """
    base_url = get_base_url().rstrip('/')
    route_path = get_route(route_name)
    full_url = f"{base_url}{route_path}"
    print(
        f"[DEBUG]: base_url={base_url}, route_name={route_name}, route_path={route_path}, full_url={full_url}")  # –û—Ç–ª–∞–¥–∫–∞
    return full_url
    # return f"{get_base_url().rstrip('/')}{get_route(route_name)}"


def get_temp_dir_for_route(route_key: str, device: str, prefix: str = "CLI") -> Path:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ—É—Ç–∞ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    :param route_key: –ö–ª—é—á —Ä–æ—É—Ç–∞.
    :param device: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (desktop –∏–ª–∏ mobile).
    :param prefix: –¢–∏–ø –∑–∞–ø—É—Å–∫–∞ ("CLI", "API", "CrUX").
    :return: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    """
    date = datetime.now().strftime("%d-%m-%y")
    temp_dir = TEMP_REPORTS_DIR / f"{date}_{prefix}_{route_key}_{device}"
    temp_dir.mkdir(parents=True, exist_ok=True)
    print(f"[DEBUG] –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–æ—É—Ç–∞ {route_key} —Å–æ–∑–¥–∞–Ω–∞: {temp_dir}")
    return temp_dir


def get_report_path(route_key: str, device: str, is_local: bool) -> Path:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç—á–µ—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ—É—Ç–∞ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    :param route_key: –ö–ª—é—á —Ä–æ—É—Ç–∞.
    :param device: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (desktop –∏–ª–∏ mobile).
    :param is_local: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫.
    :return: –ü—É—Ç—å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç—á–µ—Ç—É.
    """
    date_time = datetime.now().strftime("%d-%m-%y_%H-%M-%S")
    prefix = "local" if is_local else "api"
    report_path = REPORTS_DIR / f"{date_time}_{prefix}_{route_key}_{device}_report.json"
    return report_path


def cleanup_temp_files(temp_dir: Path):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
    :param temp_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.
    """
    if temp_dir.exists():
        shutil.rmtree(temp_dir)
        print(f"[INFO] –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã: {temp_dir}")


def get_google_creds_path() -> Path:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google.
    :return: –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    :raises ValueError: –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GS_CREDS –Ω–µ –∑–∞–¥–∞–Ω–∞.
    """
    gs_creds = os.getenv("GS_CREDS")
    if not gs_creds:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'GS_CREDS' –Ω–µ –∑–∞–¥–∞–Ω–∞.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ lighthouse
    creds_path = LIGHTHOUSE_DIR / gs_creds.lstrip("/")
    if not creds_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {creds_path}")

    return creds_path


def get_worksheet_name(environment: str, is_local: bool) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ª–∏—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ç–∏–ø–∞ –∑–∞–ø—É—Å–∫–∞.
    :param environment: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, DEV, TEST, STAGE, PROD).
    :param is_local: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (True) –∏–ª–∏ API (False).
    :return: –ò–º—è –ª–∏—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ç–∏–ø–∞ –∑–∞–ø—É—Å–∫–∞.
    :raises KeyError: –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    if not is_local:
        # –î–ª—è API –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PROD
        worksheet_var = "GS_WORKSHEET_PROD"
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é
        suffix = "_L" if environment.upper() == "PROD" else ""
        worksheet_var = f"GS_WORKSHEET_{environment.upper()}{suffix}"

    worksheet_name = os.getenv(worksheet_var)
    if not worksheet_name:
        raise KeyError(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {worksheet_var} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return worksheet_name


def clean_temp_files(temp_dir: str):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤."""
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
        print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ {temp_dir} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {temp_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")
