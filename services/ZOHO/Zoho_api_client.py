import requests
import os
from dotenv import load_dotenv


class ZohoAPI:
    """
        –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Zoho.

        –ê—Ç—Ä–∏–±—É—Ç—ã:
            client_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞.
            client_secret (str): –°–µ–∫—Ä–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
            refresh_token (str): –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            access_token (str): –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
            project_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞.
            portal_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞.
            session (requests.Session): –°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
            base_url (str): –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤.
        """


    def __init__(self):
        env_path = os.path.join(os.path.dirname(__file__), "config_zoho.env")
        load_dotenv(env_path)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config_zoho.env

        self.client_id = os.getenv("ZOHO_CLIENT_ID")
        self.client_secret = os.getenv("ZOHO_CLIENT_SECRET")
        self.refresh_token = os.getenv("ZOHO_REFRESH_TOKEN")
        self.access_token = os.getenv("ZOHO_ACCESS_TOKEN")
        self.project_id = os.getenv("ZOHO_PROJECT_ID")
        self.authorization_code = os.getenv("ZOHO_AUTHORIZATION_CODE")
        self.redirect_uri = os.getenv("ZOHO_REDIRECT_URI")
        self.portal_name = os.getenv("ZOHO_PORTAL_NAME")

        self.session = requests.Session()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.base_url = self.get_base_url()
        self.check_and_refresh_tokens()


    def get_base_url(self) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API-–¥–æ–º–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤.
        """
        domains = {
            "com": "projectsapi.zoho.com",
            "eu": "projectsapi.zoho.eu",
            "in": "projectsapi.zoho.in",
            "cn": "projectsapi.zoho.com.cn"
        }
        region = os.getenv("ZOHO_REGION", "com")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é .com
        return f"https://{domains.get(region, domains['com'])}/restapi/portal/{self.portal_name}"


    def check_and_refresh_tokens(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö.
        """
        if not self.refresh_token:
            print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ refresh_token...")
            self.refresh_token = self.get_refresh_token()
            self.save_tokens(self.access_token, self.refresh_token)

        if not self.access_token or not self.check_access_token():
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token...")
            self.access_token = self.do_access_token()
            self.save_tokens(self.access_token, self.refresh_token)


    def check_access_token(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π access_token.
        :return bool: True, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        url = f"{self.base_url}/projects/"
        headers = {"Authorization": f"Zoho-oauthtoken {self.access_token}"}
        response = self.session.get(url, headers=headers)
        return response.status_code == 200


    def request_token(self, grant_type: str, additional_params: dict = None) -> dict:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (access_token –∏–ª–∏ refresh_token).
        :param grant_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞ ('authorization_code' –∏–ª–∏ 'refresh_token').
        :param additional_params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
        :return dict: –û—Ç–≤–µ—Ç API —Å —Ç–æ–∫–µ–Ω–∞–º–∏.
        """
        url = "https://accounts.zoho.com/oauth/v2/token"
        params = {
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "grant_type": grant_type,
        }
        if additional_params:
            params.update(additional_params)

        try:
            response = self.session.post(url, data=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞: {e}")
            raise


    def do_access_token(self) -> str:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç access_token —á–µ—Ä–µ–∑ refresh_token.
        :return str: –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
        """
        if not self.refresh_token:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token.")

        response_data = self.request_token(
            grant_type="refresh_token",
            additional_params={"refresh_token": self.refresh_token}
        )
        new_access_token = response_data.get("access_token")
        if not new_access_token:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π access_token.")
        print("‚úÖ –ù–æ–≤—ã–π access_token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        return new_access_token

    def get_refresh_token(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç refresh_token —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ZOHO_AUTHORIZATION_CODE.
        """
        if not self.authorization_code:
            raise ValueError(
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ZOHO_AUTHORIZATION_CODE –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è refresh_token. "
                "–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )

        response_data = self.request_token(
            grant_type="authorization_code",
            additional_params={
                "code": self.authorization_code,
                "redirect_uri": self.redirect_uri,
            }
        )
        new_refresh_token = response_data.get("refresh_token")
        if not new_refresh_token:
            print(f"‚ùå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_data}")
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π refresh_token.")
        print("‚úÖ –ù–æ–≤—ã–π refresh_token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        return new_refresh_token


    @staticmethod
    def save_tokens(access_token: str, refresh_token: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç access_token –∏ refresh_token –≤ config_zoho.env.
        :param access_token: –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
        :param refresh_token: –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        """
        env_path = os.path.join(os.path.dirname(__file__), "config_zoho.env")
        with open(env_path, "r") as file:
            lines = file.readlines()

        with open(env_path, "w") as file:
            for line in lines:
                if line.startswith("ZOHO_ACCESS_TOKEN="):
                    file.write(f"ZOHO_ACCESS_TOKEN={access_token}\n")
                elif line.startswith("ZOHO_REFRESH_TOKEN="):
                    file.write(f"ZOHO_REFRESH_TOKEN={refresh_token}\n")
                else:
                    file.write(line)


    def send_request(self, url: str, params: dict = None) -> dict | None:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Zoho.
        :param url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
        :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.
        :return dict | None: –û—Ç–≤–µ—Ç API –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        try:
            headers = {"Authorization": f"Zoho-oauthtoken {self.access_token}"}
            response = self.session.get(url, headers=headers, params=params)

            if response.status_code == 401:
                print("üîÑ access_token —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                self.access_token = self.do_access_token()
                save_tokens(self.access_token, self.refresh_token)

                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                headers = {"Authorization": f"Zoho-oauthtoken {self.access_token}"}
                response = self.session.get(url, headers=headers, params=params)

            if response.status_code == 403:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {response.status_code}, {response.text}")
                return None

            return self.handle_response(response)
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

    @staticmethod
    def handle_response(response: requests.Response) -> dict | None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–æ—Ç–≤–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫–∏.
        :param response: HTTP-–æ—Ç–≤–µ—Ç.
        :return dict | None: –û—Ç–≤–µ—Ç API –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}, {response.text}")
            return None


    def get_portals(self) -> dict | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–∞–ª–æ–≤.
        :return dict | None: –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–∞–ª–æ–≤ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        url = f"{self.base_url}/portals/"
        return self.send_request(url)


    def get_entities_by_filter(self, entity_type: str,
                               created_after: str = None,
                               created_before: str = None,
                               closed_after: str = None,
                               closed_before: str = None,
                               owner_id: str = None,
                               tags: list[str] = None,
                               milestone_id: str = None,
                               tasklist_id: str = None
                               ) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ (–∑–∞–¥–∞—á–∏ –∏–ª–∏ –±–∞–≥–∏) –ø–æ —Ñ–∏–ª—å—Ç—Ä—É.
         :param entity_type: –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ ('tasks', 'bugs', 'milestones', 'tasklists').
        :param created_after: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (YYYY-MM-DD), –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã.
        :param created_before: –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (YYYY-MM-DD), –¥–æ –∫–æ—Ç–æ—Ä–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã.
        :param closed_after: –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (YYYY-MM-DD), –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã.
        :param closed_before: –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (YYYY-MM-DD), –¥–æ –∫–æ—Ç–æ—Ä–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã.
        :param owner_id: ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
        :param milestone_id: ID –º–µ–π–ª—Å—Ç–æ—É–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
        :param tasklist_id: ID —Ç–∞—Å–∫-–ª–∏—Å—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
        :return list[dict]: –°–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É.
        """
        if entity_type not in ["tasks", "bugs", "milestones", "tasklists"]:
            raise ValueError("–¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'tasks', 'bugs', 'milestones' –∏–ª–∏ 'tasklists'.")

        url = f"{self.base_url}/projects/{self.project_id}/{entity_type}/"
        params = {}
        if created_after:
            params["created_date_start"] = created_after
        if created_before:
            params["created_date_end"] = created_before
        if closed_after:
            params["closed_date_start"] = closed_after
        if closed_before:
            params["closed_date_end"] = closed_before
        if owner_id:
            params["owner"] = owner_id
        if tags:
            params["tags"] = ",".join(tags)
        if milestone_id:
            params["milestone_id"] = milestone_id
        if tasklist_id:
            params["tasklist_id"] = tasklist_id

        print(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: URL={url}, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã={params}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        response = self.send_request(url, params=params)
        if response is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {entity_type}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
            return []
        return response.get(entity_type, [])


    def get_users(self, search_term: str = None) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ.
        :param search_term: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email.
        :return list[dict]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        url = f"{self.base_url}/projects/{self.project_id}/users/"
        params = {}
        if search_term:
            params["search"] = search_term
        return self.send_request(url).get("users", [])


    def get_tasks_by_milestone(self, milestone_id: str) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ–π–ª—Å—Ç–æ—É–Ω–æ–º.
        """
        return self.get_entities_by_filter("tasks", milestone_id=milestone_id)


    def get_tasks_by_tasklist(self, tasklist_id: str) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–∞—Å–∫-–ª–∏—Å—Ç–æ–º.
        """
        return self.get_entities_by_filter("tasks", tasklist_id=tasklist_id)


    def get_tasks_by_title(self, title: str) -> list[dict]:
        """
        –ò—â–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–∞—Å–∫-–ª–∏—Å—Ç–∞ –∏–ª–∏ –º–µ–π–ª—Å—Ç–æ—É–Ω–∞.
        –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –ø–æ —Ç–∞—Å–∫-–ª–∏—Å—Ç–∞–º, –∑–∞—Ç–µ–º –ø–æ –º–µ–π–ª—Å—Ç–æ—É–Ω–∞–º.
        """
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Ç–∞—Å–∫-–ª–∏—Å—Ç–∞–º
        tasklist_id = self.get_tasklist_id_by_name(title)
        if tasklist_id:
            return self.get_entities_by_filter("tasks", tasklist_id=tasklist_id)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –º–µ–π–ª—Å—Ç–æ—É–Ω–∞–º
        milestone_id = self.get_milestone_id_by_name(title)
        if milestone_id:
            return self.get_entities_by_filter("tasks", milestone_id=milestone_id)

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []


    def get_tasklist_id_by_name(self, tasklist_name: str) -> str | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–∞—Å–∫-–ª–∏—Å—Ç–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
        """
        tasklists = self.get_entities_by_filter("tasklists")
        for tasklist in tasklists:
            if tasklist["name"].lower() == tasklist_name.lower():
                return tasklist["id"]
        return None


    def get_milestone_id_by_name(self, milestone_name: str) -> str | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –º–µ–π–ª—Å—Ç–æ—É–Ω–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
        """
        milestones = self.get_entities_by_filter("milestones")
        for milestone in milestones:
            if milestone["name"].lower() == milestone_name.lower():
                return milestone["id"]
        return None


    def get_tasks_in_date_range(self, start_date: str, end_date: str) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç.
        :param start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD).
        :param end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD).
        :return: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
        """
        return self.get_entities_by_filter("tasks", created_after=start_date, created_before=end_date)


    def get_blueprint_graph(self) -> dict | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∞—Ñ Blueprint.
        :return dict | None: –ì—Ä–∞—Ñ Blueprint –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        url = f"{self.base_url}/automation/blueprint/{self.project_id}/graph"
        return self.send_request(url)


    def get_bug_statuses(self) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –±–∞–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
        :return list[dict]: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –±–∞–≥–æ–≤.
        """
        url = f"{self.base_url}/projects/{self.project_id}/bugs/defaultfields/"
        return self.send_request(url).get("defaultfields", {}).get("status_details", [])


    def get_project_tags(self) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞.
        :return list[dict]: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
        """
        url = f"{self.base_url}/projects/{self.project_id}/tags/"
        response = self.send_request(url)
        return response.get("tags", [])


    def manage_tag(self, tag_id: str, entity_id: str, entity_type: int, action: str) -> bool:
        """
        –ê—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç –∏–ª–∏ –¥–∏—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç —Ç–µ–≥ —Å —Å—É—â–Ω–æ—Å—Ç—å—é.

        :param tag_id: ID —Ç–µ–≥–∞.
        :param entity_id: ID —Å—É—â–Ω–æ—Å—Ç–∏.
        :param entity_type: –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ (5 - –∑–∞–¥–∞—á–∞, 6 - –±–∞–≥).
        :param action: –î–µ–π—Å—Ç–≤–∏–µ ('associate' –∏–ª–∏ 'dissociate').
        :return bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏.
        """
        if action not in ["associate", "dissociate"]:
            raise ValueError("–î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'associate' –∏–ª–∏ 'dissociate'.")

        url = f"{self.base_url}/projects/{self.project_id}/tags/{action}"
        data = {"tag_id": tag_id, "entity_id": entity_id, "entityType": entity_type}
        response = self.send_request(url, params=data)
        return response is not None


    def create_bug(self, title: str, description: str, assignee_id: str = None, priority: str = None) -> dict | None:
        """
        –°–æ–∑–¥–∞—ë—Ç –±–∞–≥ –≤ –ø—Ä–æ–µ–∫—Ç–µ.
        :param title: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–≥–∞.
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞.
        :param assignee_id: ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        :param priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–∞–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        :return: dict | None: –û—Ç–≤–µ—Ç API —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –±–∞–≥–µ.
        """
        url = f"{self.base_url}/projects/{self.project_id}/bugs/"
        data = {
            "title": title,
            "description": description,
            "assignee_id": assignee_id,
            "priority": priority,
        }
        return self.send_request(url, params=data)
