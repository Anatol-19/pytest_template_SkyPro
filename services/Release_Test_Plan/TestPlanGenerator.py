import os
import sys
import json
from datetime import datetime, timedelta

sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from services.ZOHO.Zoho_api_client import ZohoAPI


class TestPlanGenerator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞ —Ä–µ–ª–∏–∑–∞.
    """


    def __init__(self, users_mngr, task_status_mngr, defect_status_mngr):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TestPlanGenerator —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤.
        """
        self.api = ZohoAPI()
        self.user_manager = users_mngr
        self.task_status_manager = task_status_mngr
        self.defect_status_manager = defect_status_mngr
        self.template = self.load_template()
        self.start_date = None
        self.end_date = None
        self.all_tasks = []
        self.milestones_in_sprint = []

    def set_dates(self, start_date: str, end_date: str) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–ø—Ä–∏–Ω—Ç–∞.
        """
        self.start_date = start_date
        self.end_date = end_date

    ###################################################
    # DeBugs Methods

    # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON-–æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    def save_json_to_file(self, data, filename="response.json"):
        with open(filename, "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        print(f"‚úÖ JSON-–æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {filename}")

    def print_json_to_console(self, data):
        """
        –í—ã–≤–æ–¥–∏—Ç JSON-–æ–±—ä–µ–∫—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        """
        print(json.dumps(data, indent=4, ensure_ascii=False))
    ##################################################

    def initialize_tasks_and_milestones(self, titles):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –º–µ–π–ª—Å—Ç–æ—É–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞.
        """
        for title in titles:
            tasks = self.api.get_tasks_by_title(title)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            for task in tasks:
                if task not in self.all_tasks:
                    self.all_tasks.append(task)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ–π–ª—Å—Ç–æ—É–Ω—ã
                milestone_id = task.get("milestone_id")
                if milestone_id and milestone_id not in self.milestones_in_sprint:
                    self.milestones_in_sprint.append(milestone_id)


    @staticmethod
    def load_template() -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞.
        """
        return """
> "–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞."

## 1. –ü—Ä–æ–¥—É–∫—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

> –§—É–Ω–∫—Ü–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã

### –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Ä–µ–ª–∏–∑–∞

{{affected_functionality}}

### –§–æ–∫—É—Å –ª–∏—Å—Ç

{{focus_list}}

## 2. –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–º–∫–∞—Ö —Ä–µ–ª–∏–∑–∞

{{tasks_table}}

## 3. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- [Frozen Maket VRS](https://www.figma.com/design/p2PTHvq7gnvN4O28rfbkJU/vrsmash-frozen-03-04-2025?node-id=1609-149106&t=TVn695vjIEkdUVMU-1)
- [ACP Maket](https://www.figma.com/design/wf3rauB0bulldYVuJuUCGy/CREATOR-PORTAL---ADMIN--Copy-11-03-2025-?node-id=12902-17996&t=AVsZbiMSJuxCk76n-1)
- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è QA –ø–æ VRS](https://docs.vrbangers.com/wiki/vrporn/view/Main/)
- [–ú–∞—Ç—Ä–∏—Ü–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–∞–º–∏](https://docs.google.com/spreadsheets/d/1O5v8aaTbaYDWrEZa29lLJEUFlK_A9lil/edit?usp=sharing&ouid=100519744549498352317&rtpof=true&sd=true) (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

## 4. –í–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
| –í–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è          | –î–∞—Ç–∞       | –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π | –°—Ç–∞—Ç—É—Å        |
| -------------------------- | ---------- | ------------- | ------------- |
{{testing_schedule}}

## –¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
{{regression_report}}
"""


    @staticmethod
    def generate_tasks_table(tasks: list[dict]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∑–∞–¥–∞—á –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ–π–ª—Å—Ç–æ—É–Ω–∞.
        """
        header = "| –ó–∞–¥–∞—á–∞ (ID, –Ω–∞–∑–≤–∞–Ω–∏–µ) | –ú–µ–π–ª—Å—Ç–æ—É–Ω/–¢–∞—Å–∫-–ª–∏—Å—Ç | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç | QA  | Dev  | –°—Ç–∞—Ç—É—Å   |\n"
        header += "| --------------------- | ------------------- | --------- | --- | ---- | -------- |\n"

        def format_owners(t_owners: list[dict], role: str) -> str:
            return ", ".join(
                owner["full_name"] for owner in t_owners if owner.get("role") == role
            ) or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        tasks_table = ""
        for task in tasks:
            milestone_or_tasklist = f"{task.get('milestone_name', '–ù–µ —É–∫–∞–∑–∞–Ω')} / {task.get('tasklist')}"
            owners = task.get("details", {}).get("owners", [])
            qa_list = format_owners(owners, "QA")
            dev_list = format_owners(owners, "Dev")
            tasks_table += (
                f"| [{task['key']}]({task['link']['web']['url']}) - {task['name']} | "
                f"{milestone_or_tasklist} | {task.get('priority', '–ù–µ —É–∫–∞–∑–∞–Ω')} | "
                f"{qa_list} | {dev_list} | {task['status']['name']} |\n"
            )
        return header + tasks_table


    def generate_testing_schedule(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∏–Ω—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç datetime
        start_date = datetime.strptime(self.start_date, "%Y-%m-%d")

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_start_date = start_date + timedelta(days=4)  # 5-–π –¥–µ–Ω—å —Å–ø—Ä–∏–Ω—Ç–∞
        test_end_date = start_date + timedelta(days=6)  # 7-–π –¥–µ–Ω—å —Å–ø—Ä–∏–Ω—Ç–∞
        stage_date = start_date + timedelta(days=7)  # 8-–π –¥–µ–Ω—å —Å–ø—Ä–∏–Ω—Ç–∞ (—á–µ—Ç–≤–µ—Ä–≥)
        prod_date = start_date + timedelta(days=9)  # 10-–π –¥–µ–Ω—å —Å–ø—Ä–∏–Ω—Ç–∞ (–≤—Ç–æ—Ä–Ω–∏–∫)

        tasks = self.api.get_tasks_in_date_range(self.start_date, self.end_date)
        return (
            f"| –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å–ø—Ä–∏–Ω—Ç–∞ | {self.start_date} - {self.end_date}| QA Team | üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ |\n"
            f"| –†–µ–≥—Ä–µ—Å—Å –ø—É–ª–∞ –∑–∞–¥–∞—á —Å–ø—Ä–∏–Ω—Ç–∞ –Ω–∞ [TEST] | {test_start_date.strftime('%d%m%y')} - {test_end_date.strftime('%d%m%y')} | QA1, QA2 | üî¥ –ù–µ –Ω–∞—á–∞—Ç–æ |\n"
            f"| –†–µ–≥—Ä–µ—Å—Å —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ç–∫–∏ –Ω–∞ [STAGE] | {stage_date.strftime('%d%m%y')} | QA1, QA2 | üî¥ –ù–µ –Ω–∞—á–∞—Ç–æ |\n"
            f"| –†–µ–≥—Ä–µ—Å—Å –Ω–∞ [PROD] | {prod_date.strftime('%d%m%y')} | QA3 | üü¢ –ì–æ—Ç–æ–≤–æ |\n"
        )


    def generate_focus_list(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ–∫—É—Å-–ª–∏—Å—Ç –¥–ª—è —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞.
        """
        tasks = self.api.get_tasks_in_date_range(self.start_date, self.end_date)
        return (
            "- üìå _–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –¥–æ—Ä–∞–±–æ—Ç–∫–∏, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥)_\n"
            "- üêû _–†–µ–≥—Ä–µ—Å—Å–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã (–Ω–æ–≤—ã–µ –±–∞–≥–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ —Å–Ω–æ–≤–∞)_\n"
            "- ‚ö†Ô∏è _–§–ª–∞–∫—É—é—â–∏–µ —Ç–µ—Å—Ç—ã (–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–Ω–∞–ª–∏–∑–∞)_\n"
            "- *–ó–∞ –∫–∞–∂–¥—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç QA*\n"
            "- *–ü–æ—Å–ª–µ 2—Ö —Ä–µ–ª–∏–∑–æ–≤ –±–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ ‚Äî –æ–Ω –ø–æ–∫–∏–¥–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫*\n"
            f"- –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}\n"
        )

    def generate_affected_functionality(self, functionality_map: dict) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç.
        """
        if not self.start_date or not self.end_date:
            raise ValueError("–î–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–ø—Ä–∏–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

        tasks = self.api.get_entities_by_filter(
            entity_type="tasks",
            created_after=self.start_date,
            created_before=self.end_date
        )

        affected_functionality = set()
        for task in tasks:
            tags = task.get("tags", [])
            for tag in tags:
                if isinstance(tag, dict):
                    tag = tag.get("name", "")
                if tag in functionality_map:
                    affected_functionality.add(functionality_map[tag])
        return "\n".join(f"- {func}" for func in sorted(affected_functionality)) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    def generate_defects_table(self, defects: list[dict]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–µ—Ñ–µ–∫—Ç–æ–≤.
        """
        header = "| –î–µ—Ñ–µ–∫—Ç (ID, –Ω–∞–∑–≤–∞–Ω–∏–µ) | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç | –°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å | QA  | Dev  | –°—Ç–∞—Ç—É—Å   |\n"
        header += "| --------------------- | --------- | ----------- | --- | ---- | -------- |\n"

        def format_owners(d_owners: list[dict], role: str) -> str:
            return ", ".join(
                owner["name_ru"] for owner in d_owners if owner.get("role") == role
            ) or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        defects_table = ""
        for defect in defects:
            # self.print_json_to_console(defect)  # –î–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
            # self.save_json_to_file(defect)  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            owners = defect.get("details", {}).get("owners", [])
            qa_list = format_owners(owners, "QA")
            dev_list = format_owners(owners, "Dev")
            defects_table += (
                f"| [{defect['key']}]({defect['link']['web']['url']}) - {defect['title']} | "
                f"{defect.get('priority', '–ù–µ —É–∫–∞–∑–∞–Ω')} | {defect.get('severity', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} | "
                f"{qa_list} | {dev_list} | {defect['status']['type']} |\n"
            )
        return header + defects_table


    def generate_regression_report(self) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ —Ä–µ–≥—Ä–µ—Å—Å–µ.
        """
        if not self.start_date or not self.end_date:
            raise ValueError("–î–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–ø—Ä–∏–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–≥–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
        defects = self.api.get_entities_by_filter(
            entity_type="bugs",
            created_after=self.start_date,
            created_before=self.end_date
        )
        closed_defects = self.api.get_entities_by_filter(
            entity_type="bugs",
            closed_after=self.start_date,
            closed_before=self.end_date
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ—Ñ–µ–∫—Ç–æ–≤
        defects_table = self.generate_defects_table(defects)

        return (
            f"### –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã (—Å {self.start_date} –ø–æ {self.end_date})\n{defects_table or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
            f"### –ó–∞–∫—Ä—ã—Ç—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã (—Å {self.start_date} –ø–æ {self.end_date})\n"
            f"{self.generate_defects_table(closed_defects) or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        )


    def generate_plan_for_tasks(self, tasks: list[dict], output_file="test_plan.md") -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç-–ø–ª–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª.
        """
        tasks_table = self.generate_tasks_table(tasks)
        testing_schedule = self.generate_testing_schedule()
        focus_list = self.generate_focus_list()
        affected_functionality = self.generate_affected_functionality(functionality_map={})
        regression_report = self.generate_regression_report()

        plan = (
            self.template
            .replace("{{tasks_table}}", tasks_table)
            .replace("{{testing_schedule}}", testing_schedule)
            .replace("{{focus_list}}", focus_list)
            .replace("{{affected_functionality}}", affected_functionality)
            .replace("{{regression_report}}", regression_report)
        )

        with open(output_file, "w", encoding="utf-8") as file:
            file.write(plan)

        print(f"‚úÖ –¢–µ—Å—Ç-–ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª {output_file}")